git fetch/pull/push的统一格式为：
    git fetch/pull/push <repo> <src>:<dst>
但是对于“方向”不同的操作，src和dst指代不同，
对于fetch和pull，src指远程分支，dst指本地分支，而对于push则相反。
对于fetch/pull
	git fetch/pull <repo> <rbranch>:<lbranch>
对于push
	git push <repo> <lbranch>:<rbranch>

git ls-remote [--heads] [--tags] <repo>
    列举出<repo>中所有的refs
	
git ls-files [--cached|deleted|ignored|stage|modified]
e.g. 有时会在文件管理器中删除workspace中的文件，这时移除这些已经被删除的文件：
	git rm $(git ls-files --deleted)
但是这个只能在linux上使用，还有更通用的方法：
	git commit -a
它会自动将已经删除的文件从索引中移除。

git commit -a
-a == --all
Tell the command to automatically stage files that have been modified and deleted,
but new files you have not told git about are not affected.
注意：-a会影响modified和deleted文件哦！所以将已经删除的文件从index中去掉，可以使用
	git commit -a
来完成。

=========================
git reset v.s. git checkout
从两方面来比较：commit级别 和 file级别
commit级别：
	reset又分为--soft, --mixed, --hard三种，而checkout会直接把commit的内容，覆盖到index，
	然后再覆盖到working tree，但是如果与working tree中原本的内容冲突的话就不会修改working tree的内容。
file级别：
	git reset <commit> <file-path>
	<commit>如果省略就是用HEAD，该操作只影响index，不影响working tree，相当于使用reset的--mixed参数，
	但是reset 文件级别的操作没有--hard, --soft参数。
	
	git checkout <commit> <file-path>
	如果省略<commit>就会将index的内容覆盖到working tree，直接覆盖，不会警告，
	如果不省略<commit>就会将commint中的<file-path>覆盖index，然后覆盖working tree，不警告。
	所以，
	git checkout HEAD <file> 跟 git checkout <file>
	两个操作结果是不一样的。
	
===========================
update-ref 与 symbolic-ref
update-ref修改ref下的内容，如
	git update-ref refs/heads/master cac0d3
	相当于
	echo "cac0d3" > .git/refs/heads/master
	但是，使用update-ref更加安全
symbolic-ref修改对ref的引用，可以理解为修改**二级指针**，如，
	git symbolic-ref  HEAD  refs/heads/master
	相当于
	echo "refs/heads/master" > HEAD
	但是，使用symbolic-ref更加安全

===========================

